camera:
    type: perspective
    # focal_length: 1
    focal_length: [[16, 2], [17, 2.5], [18, 3], [19, 4], [20, 6]] # pairs of [zoom, focal len]
    vanishing_point: [-.25, -.25] # slightly off-center viewing angle, towards lower-left of screen

    # type: isometric
    # axis: [1, .5]

    # type: flat

modes:
    # note: consider this syntax as a special case for global mode settings
    # all:
    #     shaders:
    #         transforms:
    #             fragment: { url: demos/shaders/spotlight.glsl }

    water:
        extends: polygons
        animated: true
        shaders:
            defines:
                EFFECT_NOISE_ANIMATED: true
            transforms:
                globals:
                    url: demos/shaders/glsl-noise-periodic-3d.glsl
                fragment:
                    url: demos/shaders/noise.glsl

    # points:
    #     shaders:
    #         transforms:
    #             # fragment: color += vec3(gl_FragCoord.x / u_resolution.x, 0.0, gl_FragCoord.y / u_resolution.y);
    #             fragment: { url: demos/shaders/color_bleed.glsl }

    # polygons:
    #     shaders:
    #         defines:
    #             LIGHTING_ENVIRONMENT: true

layers:
    earth:
        color:
            default: [0.175, 0.175, 0.175, 1]

    landuse:
        interactive: true
        color:
            default: [0.5, 0.875, 0.5, 1]
            pitch: [0.3, 0.675, 0.3, 1]
        # outline:
        #     color:
        #         default: [1, 1, 1]
        #     width:
        #         default: 1

    water:
        mode:
            name: water
        interactive: true
        color:
            default: [0.5, 0.5, 0.875, 1]
        outline:
            color:
                default: [0.6, 0.6, 0.975, 1]
            width:
                default:
                    function (f, t) {
                        return (
                            t.coords.z >= 16 &&
                            (f.properties.kind != 'ocean' && f.properties.kind != 'riverbank') &&
                            (2.5 * Math.log(t.coords.z))
                        );
                    }

    roads:
        interactive: function (f, t) { return (t.coords.z >= 18); }
        color:
            # default: Style.color.randomColor
            default: [0.4, 0.4, 0.4, 1]
            highway: [1.0, 1.0, 1.0, 1]
            major_road: [0.5, 0.5, 0.5, 1]
            minor_road: [0.65, 0.65, 0.65, 1]
            path: [0.8, 0.8, 0.8, 1]
            rail: [0.5, 0.0, 0.0, 1]
            debug: [1, 0, 0, 1]
        width:
            # default: Style.pixels(5)
            default: function (f, t) { return 2 * Math.log(t.coords.z); }
            highway: function (f, t) { return 3 * Math.log(t.coords.z); }
            major_road: function (f, t) { return 2.5 * Math.log(t.coords.z); }
            minor_road: function (f, t) { return 2 * Math.log(t.coords.z); }
            path: function (f, t) { return 1 * Math.log(t.coords.z); }
            debug: function (f, t) { return 5; }
        # z:
        #     path: 25
        outline:
            color:
                default: [0.1, 0.7, 0.7, 1]
            width:
                default:
                    function (f, t) { return (t.coords.z >= 18 && (2/8 * Math.log(t.coords.z))); }
                highway:
                    function (f, t) { return (t.coords.z >= 18 && (3/8 * Math.log(t.coords.z))); }
                major_road:
                    function (f, t) { return (t.coords.z >= 18 && (2.5/8 * Math.log(t.coords.z))); }
                minor_road:
                    function (f, t) { return (t.coords.z >= 18 && (2/8 * Math.log(t.coords.z))); }
                path:
                    function (f, t) { return (t.coords.z >= 18 && (2/8 * Math.log(t.coords.z))); }
                debug:
                    function (f, t) { return (t.coords.z >= 18 && (2/8 * Math.log(t.coords.z))); }

    buildings:
        mode:
            # name: popup
            # name: breathe
            # name: formica
            # name: dots
            # name: wood
            # name: rainbow2
            # name: windows
            # name: colorhalftone
            # name: palette
            # name: envmap
        # filter: function (f) { return f.properties.name != null; }
        # filter: function (f) { return Math.random() < 0.25; }
        # filter: function (f) { return true; }
        interactive: true
        color:
            # default: function(f) { var h = f.properties.height || 20; h = Math.min((h + 50) / 250, 1.0); return [h, h, h]; } // shade based on height
            # default: Style.color.pseudoRandomColor
            # default: Style.color.pseudoRandomGrayscale
            # default: function (f) { if (f.properties.name || f.properties.kind) { return [(f.properties.name && 0.6) || 0.2, 0.2, (f.properties.kind && 0.6) || 0.2]; } else { return [0.6, 0.6, 0.6] }; }
            default:
                function (f) {
                    var c = [.6, .6, .6];
                    if (f.properties.name || f.properties.kind) {
                        c = [.2, .2, .2];
                        c[0] = (f.properties.name && .6) || c[0];
                        c[2] = (f.properties.kind && .6) || c[2];
                    }
                    return [c[0], c[1], c[2], .5];
                }
        extrude:
            default: function (f, t) { return ((t.coords.z >= 15 && f.properties.height > 20) || t.coords.z >= 16) }

    pois:
        mode:
            name: points
            # name: formica
        filter: function (f) { return f.properties.name != null; }
        # visible: false
        interactive: true
        # z:
        #     default: 25
        color:
            default: [1, 1, 0, 1]
        size:
            # default: 5
            default: Style.pixels(5)
            # default: Style.pixels(function(f, t, h) { return 2 * Math.pow(h.zoom, 0.5); })
            # default: function(f, t, h) { return 2 * h.zoom; }

    # places:
    #     filter: function(f, t) { return (t.coords.z >= 13); }
    #     color: {
    #         # default: [0.0, 1.0, 1.0]
    #         default: function(f) { return f.properties.kind == 'administrative' ? [1, 0, 1] : [1, 1, 0]; }
    #     size:
    #         default: Style.pixels(5)
